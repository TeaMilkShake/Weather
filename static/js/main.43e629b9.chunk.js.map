{"version":3,"sources":["api/index.js","shared/Form/Suggestions.js","shared/Form/SmallLoader.js","hooks/index.js","shared/Form/index.js","AppContext.js","shared/Burger/index.js","shared/WeatherIcon/index.js","Home/Weather.js","assets/images/clear.jpg","assets/images/cloudy.jpg","assets/images/rain.jpg","assets/images/drizzle.jpg","assets/images/storm.png","assets/images/clearAndCloudy.png","assets/images/snow.jpg","assets/images/mist.jpg","shared/WeatherPhoto/index.js","Home/Photo.js","Home/Loader.js","Home/index.js","shared/Navbar/index.js","City/Photo.js","City/NoResults.js","City/WeatherProps.js","City/WeatherInfo.js","City/index.js","assets/images/about.png","About/index.js","App.js","reportWebVitals.js","index.js"],"names":["config","CitySuggestions","axios","create","getCurrentLocation","lat","long","a","get","response","data","console","log","getCityWeather","id","process","getCitySuggestions","city","cancelToken","options","method","url","params","limit","minPopulation","namePrefix","headers","request","Suggestions","props","suggestions","length","style","visibility","areSuggestionsVisible","className","map","suggestion","index","onClick","handleSelect","country","SmallLoader","display","isLoading","useQuery","query","location","useLocation","queryParams","URLSearchParams","search","Form","useState","cities","setCities","inputValue","setInputValue","setIsSuggestionsVisible","setIsLoading","history","useHistory","sourseRef","useRef","handleChange","e","target","value","current","cancel","CancelToken","source","token","fetchData","onSubmit","preventDefault","handleSubmit","locationClass","type","placeholder","onFocus","onBlur","setTimeout","onChange","push","AppContext","createContext","AppProvider","aboutRef","burgerRef","isBurgerClicked","Provider","toogleBurger","classList","add","remove","clipPath","children","Burger","context","useContext","useEffect","burgerClick","addEventListener","removeEventListener","ref","WeatherIcon","icon","setIcon","weather","weatherDescription","FaCloudSun","FaCloud","FaSun","GiSnowing","FaCloudSunRain","FaCloudShowersHeavy","RiThunderstormsFill","RiMistFill","Weather","weatherData","temperature","currentPlace","county","description","WeatherPhoto","imageRef","src","Image","cloudyImg","clearCloudy","clearImg","snowImg","drizzleImg","rainImg","thunderImg","mistImg","onload","setIsLoaderVisible","backgroundImageStyles","backgroundImage","backgroundPosition","backgroundSize","React","cloneElement","Photo","zoom","setZoom","isLoaderVisible","items","slow","from","transform","enter","leave","prop","Loader","show","set","gentle","opacity","Home","setCurrentPlace","setCountry","setWeatherData","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","locationResponse","locality","countryName","localityInfo","administrative","elem","name","hasOwnProperty","cityId","geonameId","WeatherResponse","Math","round","main","temp","Navbar","PhotoLoader","NoResults","WeatherPropsLoader","WeatherProps","noResults","placeName","windSpeed","humidity","pressure","WeatherInfo","setData","cityQuery","toLowerCase","countryQuery","cityResponse","wind","speed","City","About","aboutImg","alt","href","rel","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43e629b9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst config = {\r\n    bigDataCloudBaseUrl: `https://api.bigdatacloud.net/data/reverse-geocode-client?`,\r\n    openWeatherBaseUrl: `https://api.openweathermap.org/data/2.5/weather?`,\r\n    geoDBBaseUrl: `http://geodb-free-service.wirefreethought.com/v1/geo/cities?`,\r\n}\r\n\r\nexport const CitySuggestions = axios.create()\r\n\r\nexport const getCurrentLocation = async (lat,long)=>{\r\n    try{\r\n        let response = await axios.get(`${config.bigDataCloudBaseUrl}latitude=${lat}&longitude=${long}&localityLanguage=en`)\r\n        return response.data\r\n    }catch(error){\r\n        console.log(`error`)\r\n    }   \r\n}\r\nexport const  getCityWeather = async (id)=>{\r\n    try{\r\n        let response = await axios.get(`${config.openWeatherBaseUrl}id=${id}&units=metric&APPID=${process.env.REACT_APP_OPEN_WEATHER_API_KEY}`)\r\n        return response.data\r\n    }catch(error){\r\n        console.log(`error`)\r\n    } \r\n}\r\n /* export const getCitySuggestions = async (city, cancelToken)=>{\r\n    try{\r\n        let response = await CitySuggestions.get(`${config.geoDBBaseUrl}limit=5&offset=0&namePrefix=${city}&minPopulation=40000`, {cancelToken})\r\n        return response.data\r\n    }catch(error){\r\n        \r\n    }  \r\n} */\r\n  \r\nexport const getCitySuggestions = async(city, cancelToken) =>{\r\n    const options = {\r\n        method: 'GET',\r\n        url: 'https://wft-geo-db.p.rapidapi.com/v1/geo/cities',\r\n        params: {limit: '5', minPopulation: '30000', namePrefix: city},\r\n        headers: {\r\n          'x-rapidapi-key': '73684db7a1msh8b685a8e80dea2ap10cbdejsn3b4ff31b5e1c',\r\n          'x-rapidapi-host': 'wft-geo-db.p.rapidapi.com'\r\n        },\r\n        cancelToken\r\n      };\r\n    try{\r\n        let response = await CitySuggestions.request(options)\r\n        return response.data\r\n    }catch{\r\n\r\n    }\r\n    \r\n}\r\n","import React from 'react'\r\n\r\nconst Suggestions = (props) =>{\r\n\r\n    if(props.suggestions){\r\n        if(props.suggestions.length === 0){\r\n            return  <div style={{visibility: props.areSuggestionsVisible ? `visible` : `hidden`}} className=\"suggestions\" >\r\n                        <p className=\"suggestion_no_results\">No results</p>\r\n                    </div>\r\n        }else{\r\n            return(\r\n                <div className=\"suggestions\" style={{visibility: props.areSuggestionsVisible ? `visible` : `hidden`}}>\r\n                   {props.suggestions.map((suggestion, index)=>{\r\n                       return <p className=\"suggestion\" onClick={()=> props.handleSelect(suggestion.city, suggestion.country)} key={index}>{`${suggestion.city}, ${suggestion.country}`}</p>\r\n                    })\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n    }else{\r\n        return <div></div> \r\n    }\r\n}\r\n\r\nexport default Suggestions","import React from 'react'\r\nimport {FaCloudSunRain} from 'react-icons/fa'\r\n\r\nconst SmallLoader = (props) =>{\r\n    return(\r\n        <div style={{display: props.isLoading ? 'block' : 'none'}} className=\"small_loader_wrapper\">\r\n            <div className=\"small_loader\">\r\n                <FaCloudSunRain className=\"loader_icon_dark\"/>\r\n                <FaCloudSunRain className=\"loader_icon_dark\"/>\r\n                <FaCloudSunRain className=\"loader_icon_light\"/>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SmallLoader\r\n","import {useLocation} from 'react-router-dom'\r\n\r\nexport const useQuery = (query) =>{\r\n    const location = useLocation()\r\n    const queryParams = new URLSearchParams(location.search)\r\n    if(queryParams.get(query)){\r\n        return queryParams.get(query)\r\n    }else{\r\n        return null\r\n    }\r\n}","import React, {useState, useRef, useEffect} from 'react'\r\nimport {getCitySuggestions} from '../../api/index'\r\nimport Suggestions from './Suggestions'\r\nimport {useHistory} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport SmallLoader from './SmallLoader'\r\nimport {useQuery} from '../../hooks'\r\n\r\nconst Form = (props) => {\r\n    const [cities, setCities] = useState(null)\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const [areSuggestionsVisible, setIsSuggestionsVisible] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const history = useHistory()\r\n    const sourseRef = useRef();\r\n\r\n    const handleSelect = (city, country) =>{\r\n        history.push(`/Weather/city?q=${city}&country=${country}`)\r\n    }\r\n    const handleChange = async (e) =>{\r\n        setInputValue(e.target.value)\r\n        const fetchData = async ()=>{\r\n            if(e.target.value.length >= 4){\r\n                if(typeof sourseRef.current !== 'undefined'){\r\n                    sourseRef.current.cancel()\r\n                }\r\n                sourseRef.current = axios.CancelToken.source();\r\n                setIsLoading(true)\r\n                let response = await getCitySuggestions(e.target.value, sourseRef.current.token)\r\n                if(response){\r\n                    setIsSuggestionsVisible(true)   \r\n                    setCities(response.data)\r\n                    setIsLoading(false)\r\n                }\r\n            }    \r\n            if(e.target.value.length === 3){\r\n                if(typeof sourseRef.current !== 'undefined'){\r\n                    sourseRef.current.cancel()\r\n                }\r\n                setIsLoading(false)\r\n                setIsSuggestionsVisible(false)   \r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n    const handleFocus = () =>{\r\n        setIsSuggestionsVisible(true)\r\n    }\r\n    const handleBlur = () =>{\r\n        setTimeout(() => {\r\n            setIsSuggestionsVisible(false)\r\n        }, 200);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()  \r\n    }\r\n\r\n    return(\r\n        <form onSubmit={(e) => handleSubmit(e)} className={\"form \"+props.locationClass}>\r\n            <div className=\"text_input_block\">\r\n                <SmallLoader isLoading={isLoading}/>\r\n                <input type=\"text\" placeholder=\"Type and select city from list\" onFocus={handleFocus} onBlur={handleBlur} onChange={handleChange} value={inputValue}/> \r\n                {<Suggestions areSuggestionsVisible={areSuggestionsVisible} handleSelect={handleSelect} suggestions={cities}/>}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React, {createContext, useRef} from 'react'\r\n\r\nexport const AppContext = createContext()\r\n\r\nexport const AppProvider = (props) =>{\r\n    const aboutRef = useRef()\r\n    const burgerRef = useRef()\r\n    const isBurgerClicked = useRef(false)\r\n    const toogleBurger = () =>{\r\n        isBurgerClicked.current = !isBurgerClicked.current\r\n\r\n        isBurgerClicked.current \r\n        ? burgerRef.current.classList.add('burger_clicked')\r\n        : burgerRef.current.classList.remove('burger_clicked')\r\n      \r\n        aboutRef.current.style.clipPath = isBurgerClicked.current ? `inset(0 0 0 0)` : `inset(0 0 100% 0)`\r\n    }\r\n    return(\r\n        <AppContext.Provider value={{aboutRef,burgerRef,isBurgerClicked,toogleBurger}}>\r\n            {props.children}\r\n        </AppContext.Provider>\r\n    )\r\n}","import React, {useContext, useEffect} from 'react'\r\nimport {AppContext} from '../../AppContext'\r\nconst Burger = (props) =>{\r\n    const context = useContext(AppContext)\r\n    useEffect(()=>{\r\n        const burgerClick = () =>{\r\n            context.toogleBurger()\r\n        }\r\n        context.burgerRef.current.addEventListener('click', burgerClick)\r\n        return ()=>{\r\n            context.burgerRef.current.removeEventListener('click', burgerClick)\r\n        }\r\n    }) \r\n    return(\r\n    <div ref={context.burgerRef} className={\"burger \" + props.locationClass}>\r\n        <div className=\"burger_line\"></div>\r\n        <div className=\"burger_line\"></div>\r\n        <div className=\"burger_line\"></div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Burger","import {useState, useEffect} from 'react'\r\nimport {FaCloudSun, FaCloudSunRain, FaCloudShowersHeavy, FaCloud, FaSun} from 'react-icons/fa'\r\nimport {GiSnowing} from 'react-icons/gi'\r\nimport {RiThunderstormsFill} from 'react-icons/ri'\r\nimport {RiMistFill} from 'react-icons/ri'\r\nconst WeatherIcon = (props) =>{\r\n    const [icon,setIcon] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n        switch (props.weather) {\r\n            case \"Clouds\":\r\n                props.weatherDescription === 'few clouds' ? setIcon(FaCloudSun) : setIcon(FaCloud)\r\n                setIcon(FaCloud)\r\n                break;\r\n            case \"Mist\":\r\n                props.weatherDescription === 'few clouds' ? setIcon(FaCloudSun) : setIcon(FaCloud)\r\n                setIcon(FaCloud)\r\n                break;\r\n            case \"Clear\":\r\n                setIcon(FaSun)\r\n                break;\r\n            case \"Snow\":\r\n                setIcon(GiSnowing)\r\n                break;\r\n            case \"Rain\":\r\n                props.weatherDescription === 'light rain' ? setIcon(FaCloudSunRain) : setIcon(FaCloudShowersHeavy)\r\n                break;\r\n            case \"Drizzle\":\r\n                setIcon(FaCloudShowersHeavy)\r\n                break;\r\n            case \"Thunderstorm\":\r\n                setIcon(RiThunderstormsFill)\r\n                break;\r\n            default:\r\n                setIcon(RiMistFill)\r\n                break;\r\n        }\r\n    },[props.weather, props.weatherDescription])\r\n\r\n    return(\r\n        icon\r\n    )\r\n}\r\n\r\nexport default WeatherIcon","import React from 'react'\r\nimport WeatherIcon from '../shared/WeatherIcon'\r\nconst Weather = (props) =>{\r\n    return(\r\n        <div className=\"home_weather\">\r\n            <p className=\"home_temperature\">{props.weatherData.temperature}°C</p>\r\n            <p className=\"home_city\">\r\n                {props.currentPlace}, {props.county}\r\n                <span className=\"home_weather_icon\">\r\n                    <WeatherIcon \r\n                        weather={props.weatherData.weather} \r\n                        weatherDescription={props.weatherData.description} \r\n                    /> \r\n                    </span>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather","export default __webpack_public_path__ + \"static/media/clear.d5573b8f.jpg\";","export default __webpack_public_path__ + \"static/media/cloudy.3a9a56da.jpg\";","export default __webpack_public_path__ + \"static/media/rain.d669916a.jpg\";","export default __webpack_public_path__ + \"static/media/drizzle.4be2f625.jpg\";","export default __webpack_public_path__ + \"static/media/storm.230974b5.png\";","export default __webpack_public_path__ + \"static/media/clearAndCloudy.3ad6f20e.png\";","export default __webpack_public_path__ + \"static/media/snow.ee6f6c52.jpg\";","export default __webpack_public_path__ + \"static/media/mist.bb0b398b.jpg\";","import React ,{useState,useRef, useEffect} from 'react'\r\nimport clearImg from '../../assets/images/clear.jpg'\r\nimport cloudyImg from '../../assets/images/cloudy.jpg'\r\nimport rainImg from '../../assets/images/rain.jpg'\r\nimport drizzleImg from '../../assets/images/drizzle.jpg'\r\nimport thunderImg from '../../assets/images/storm.png'\r\nimport clearCloudy from '../../assets/images/clearAndCloudy.png'\r\nimport snowImg from '../../assets/images/snow.jpg'\r\nimport mistImg from '../../assets/images/mist.jpg'\r\n\r\nconst WeatherPhoto = (props) =>{\r\n    const imageRef = useRef({current: {src: ''}})\r\n    \r\n    useEffect(()=>{\r\n            if(props.weather){\r\n                imageRef.current = new Image()\r\n                switch (props.weather) {\r\n                    case \"Clouds\":\r\n                        imageRef.current.src = cloudyImg\r\n                    break;\r\n                    case \"Mist\":\r\n                        props.weatherDescription === 'few clouds' ? imageRef.current.src = clearCloudy : imageRef.current.src = cloudyImg\r\n                        break;\r\n                    case \"Clear\":\r\n                        imageRef.current.src = clearImg\r\n                        break;\r\n                    case \"Snow\":\r\n                        imageRef.current.src = snowImg\r\n                        break;\r\n                    case \"Rain\":\r\n                        props.weatherDescription === 'light rain' ? imageRef.current.src = drizzleImg : imageRef.current.src = rainImg\r\n                        break;\r\n                    case \"Drizzle\":\r\n                        break;\r\n                    case \"Thunderstorm\":\r\n                        imageRef.current.src = thunderImg\r\n                        break;\r\n                    default:\r\n                        imageRef.current.src = mistImg\r\n                        break;\r\n                }\r\n                imageRef.current.onload = () =>{\r\n                    if(props.setIsLoaderVisible){\r\n                        props.setIsLoaderVisible(false)\r\n                    }\r\n                }  \r\n            }      \r\n    }, [props.weather])\r\n\r\n    const backgroundImageStyles={\r\n        backgroundImage: `linear-gradient(rgba(1, 2, 11, 0.4), rgba(1, 2, 11, 0.4)), url(${imageRef.current.src})`,\r\n        backgroundPosition: \"center\",\r\n        backgroundSize: \"cover\"\r\n    }\r\n\r\n        return React.cloneElement(props.children, {...props, backgroundImageStyles: backgroundImageStyles, src: imageRef.current.src})\r\n}\r\n\r\nexport default WeatherPhoto\r\n\r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport {Transition} from 'react-spring/renderprops'\r\nimport { config } from 'react-spring'\r\n\r\nconst Photo = (props)=>{\r\n    const [zoom, setZoom] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        if(!props.isLoaderVisible && props.temperature !== ''){\r\n            setZoom(true)\r\n        }\r\n    },[props.isLoaderVisible, props.temperature])\r\n    return(\r\n        <Transition\r\n            items={zoom}\r\n            config= {config.slow}\r\n            from={{ transform: `scale(1)` }}\r\n            enter={{ transform: `scale(1.2)` }}\r\n            leave={{ transform: `scale(1.2)` }}>\r\n            {zoom => zoom && (prop => <div style={{...prop, ...props.backgroundImageStyles}} className=\"home_image\"></div>)}\r\n        </Transition>\r\n        \r\n    )\r\n}\r\n\r\nexport default Photo","import React, {useState, useEffect} from 'react'\r\nimport {FaCloud} from 'react-icons/fa'\r\nimport {Transition} from 'react-spring/renderprops'\r\nimport { config } from 'react-spring'\r\n\r\nconst Loader = (props) =>{\r\n    const [show, set] = useState(true)\r\n\r\n    useEffect(() => {\r\n        if(!props.isLoaderVisible && props.temperature !== ''){\r\n            set(false)\r\n        }\r\n        \r\n    }, [props.isLoaderVisible, props.temperature])\r\n\r\n    return (\r\n        <Transition\r\n            items={show}\r\n            config={config.gentle}\r\n            from={{ opacity: 1 }}\r\n            enter={{ opacity: 1 }}\r\n            leave={{ opacity: 0 }}>\r\n            {show => show && (props => <div style={props} className=\"home_loader_block\">\r\n                    <div className=\"animated_loader\">\r\n                        <FaCloud/>\r\n                        <FaCloud/>\r\n                        <div className=\"loading_block\">\r\n                            <div className=\"loading_line\"></div>\r\n                            <div className=\"loading_line\"></div>\r\n                            <div className=\"loading_line\"></div>\r\n                            <div className=\"loading_line\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>)}\r\n        </Transition>\r\n    )\r\n    \r\n}\r\n\r\nexport default Loader","import React, {useState, useEffect} from 'react';\r\nimport Form from '../shared/Form'\r\nimport Burger from '../shared/Burger'\r\nimport Weather from './Weather'\r\nimport WeatherPhoto from '../shared/WeatherPhoto'\r\nimport Photo from './Photo'\r\nimport Loader from './Loader'\r\nimport {getCurrentLocation,getCityWeather} from '../api/index'\r\n\r\nconst Home = () => {\r\n    const [isLoaderVisible, setIsLoaderVisible] = useState(true)\r\n    const [currentPlace , setCurrentPlace] = useState('')\r\n    const [county , setCountry] = useState('')\r\n    const [weatherData, setWeatherData] = useState({temperature: '', weather: '', description: ''})\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition( async (position) => {\r\n\r\n            //Get current Location\r\n            const lat = position.coords.latitude\r\n            const long = position.coords.longitude\r\n            let locationResponse = await getCurrentLocation(lat,long)\r\n            locationResponse.city !== '' ? setCurrentPlace(locationResponse.city) : setCurrentPlace(locationResponse.locality)\r\n            setCountry(locationResponse.countryName)\r\n\r\n\r\n            // Get current city id\r\n            let cityId;\r\n            locationResponse.localityInfo.administrative.map((elem) =>{\r\n                if((elem.name === locationResponse.city || elem.name === locationResponse.locality) && elem.hasOwnProperty('geonameId')){\r\n                    cityId = elem.geonameId\r\n                }\r\n            })\r\n\r\n            let WeatherResponse = await getCityWeather(cityId)\r\n            if(WeatherResponse){\r\n                setWeatherData({\r\n                    temperature: Math.round(WeatherResponse.main.temp),\r\n                    weather: WeatherResponse.weather[0].main,\r\n                    description: WeatherResponse.weather[0].description\r\n                })\r\n            }\r\n        })\r\n    },[])\r\n        return(\r\n            <div className=\"home_wrapper\">\r\n                <Loader isLoaderVisible={isLoaderVisible} temperature={weatherData.temperature}/> \r\n                <WeatherPhoto setIsLoaderVisible={setIsLoaderVisible} weather={weatherData.weather} weatherDescription={weatherData.description}>\r\n                    <Photo isLoaderVisible={isLoaderVisible} temperature={weatherData.temperature}/>\r\n                </WeatherPhoto>\r\n\r\n                <Burger locationClass=\"home\"/>\r\n                <div className=\"side_offset home\">\r\n                    <p className=\"home_logo\">Weather logo.</p>\r\n                    <Weather \r\n                        currentPlace={currentPlace} \r\n                        county={county}\r\n                        weatherData={weatherData} \r\n                    />\r\n                    <Form locationClass=\"home\" />\r\n                </div> \r\n            </div>\r\n        )\r\n}\r\nexport default Home","import React from 'react'\r\nimport Form from '../../shared/Form'\r\nimport Burger from '../../shared/Burger'\r\n\r\nconst Navbar = (props) =>{\r\n    return(\r\n        <div className=\"navbar_background\">\r\n            <div className=\"side_offset navbar\">\r\n                <div className=\"search_block\">\r\n                    <Form locationClass=\"navbar\"/>\r\n                </div>\r\n            </div>\r\n            <Burger locationClass=\"navbar\"/>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Navbar","import React, {Fragment} from 'react'\r\n\r\nconst Photo = ({backgroundImageStyles}) =>{\r\n    return(\r\n        <div style={backgroundImageStyles} className=\"city_photo\"></div>            \r\n    )\r\n}\r\n\r\nexport const PhotoLoader = () =>{\r\n    return(\r\n        <Fragment>\r\n            <div className=\"city_photo loader\"></div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Photo","import React from 'react'\r\nimport {TiZoomOut} from 'react-icons/ti'\r\n\r\nconst NoResults = () =>{\r\n    return(\r\n        <div className=\"no_results_block\">\r\n            <div className=\"no_results_content\">\r\n                <div className=\"no_results_title\">\r\n                    <TiZoomOut />\r\n                    <p>No results</p>\r\n                </div>\r\n                <p className=\"no_results_text\">No results for 'Luudown'</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoResults","import React, {Fragment} from 'react'\r\nimport {FaWind} from 'react-icons/fa'\r\nimport {BsDropletHalf} from 'react-icons/bs'\r\nimport {IoIosSpeedometer} from 'react-icons/io'\r\nimport NoResults from './NoResults'\r\nimport WeatherIcon from '../shared/WeatherIcon'\r\n\r\nconst WeatherProps = (props) =>{\r\n    if(props.noResults === true){\r\n        return <NoResults />\r\n    }else{\r\n        return <div className=\"city_text\">\r\n                    <div className=\"city_main_info\">\r\n                        <h1>{props.placeName.city}, {props.placeName.country}</h1>\r\n                        <div className=\"weather_mini_card\">\r\n                            <p className=\"city_temperature\">{Math.round(props.temperature)}°C</p>\r\n                            <div className=\"mini_card_line\"></div>\r\n                            <div className=\"city_weather_icon\">\r\n                                <WeatherIcon \r\n                                    weather={props.weather} \r\n                                    weatherDescription={props.weatherDescription} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"city_additional_info\">\r\n                        <div className=\"city_additional_info_item\">\r\n                            <h2>Wind speed <FaWind /></h2>\r\n                            <p>{props.windSpeed} m/s</p>\r\n                        </div>\r\n                        <div className=\"city_additional_info_item\">\r\n                            <h2>Humidity <BsDropletHalf /></h2>\r\n                            <p>{props.humidity}%</p>\r\n                        </div>\r\n                        <div className=\"city_additional_info_item\">\r\n                            <h2>Pressure <IoIosSpeedometer /></h2>\r\n                            <p>{props.pressure} psf</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    }  \r\n}\r\n\r\nexport const WeatherPropsLoader = () =>{\r\n    return(\r\n        <Fragment>\r\n            <div className=\"city_text\">\r\n                <div className=\"city_main_info loader\"></div>\r\n                <div className=\"city_additional_info\">\r\n                    <div className=\"city_additional_info_item loader\"></div>\r\n                    <div className=\"city_additional_info_item loader\"></div>\r\n                    <div className=\"city_additional_info_item loader\"></div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default WeatherProps","import React , {useEffect, useState, useRef, Fragment} from 'react'\r\nimport Photo, {PhotoLoader} from './Photo'\r\nimport WeatherProps, {WeatherPropsLoader} from './WeatherProps'\r\n\r\nimport {useQuery} from '../hooks'\r\nimport {getCityWeather, getCitySuggestions, getCurrentLocation} from '../api'\r\n\r\nimport WeatherPhoto from '../shared/WeatherPhoto'\r\n\r\nconst WeatherInfo = () =>{\r\n    const [data, setData] = useState({isLoading: true , data: null})\r\n    const cityQuery = useQuery('q').toLowerCase()\r\n    const countryQuery = useQuery('country').toLowerCase()\r\n    const placeName = useRef({city: '', country: ''})\r\n\r\n    useEffect(()=>{\r\n        // Getting city weather by ID !!!\r\n        const fetchData = async() =>{\r\n            setData({isLoading: true, data: null})\r\n\r\n            let cityResponse = await getCitySuggestions(cityQuery)\r\n            \r\n            let filteredCities = cityResponse.data.map(async(city)=>{\r\n                if(city.name.toLowerCase() === cityQuery && city.country.toLowerCase() === countryQuery){\r\n                    let locationResponse =  await getCurrentLocation(city.latitude, city.longitude)     \r\n                    placeName.current = {city: city.name, country: city.country}\r\n\r\n                    let cityId;\r\n                    locationResponse.localityInfo.administrative.map((elem) =>{\r\n                        if(elem.name.toLowerCase() === countryQuery && elem.hasOwnProperty('geonameId')){\r\n                            cityId = elem.geonameId\r\n                        }\r\n                    })\r\n\r\n                    //Get city weather\r\n                    let data = await getCityWeather(cityId)\r\n                    setData({isLoading: false, data: data})\r\n                } \r\n            })      \r\n            if(filteredCities.length === 0){\r\n                setData({isLoading: false, data: null})\r\n            }        \r\n        }\r\n        fetchData()\r\n    },[cityQuery, countryQuery])    \r\n    \r\n    if(data.isLoading){\r\n        return(\r\n            <Fragment>\r\n                <PhotoLoader />\r\n                <WeatherPropsLoader />\r\n            </Fragment>\r\n        )\r\n    }else{\r\n        return(\r\n            <Fragment>\r\n                <WeatherPhoto weather={data.data.weather[0].main} weatherDescription={data.data.weather[0].description}>\r\n                    <Photo/>\r\n                </WeatherPhoto>\r\n\r\n                <WeatherProps \r\n                    isLoading={data.isLoading}\r\n                    noResults={data.data ? false : true}\r\n                    temperature={data.data.main.temp}\r\n                    weather={data.data.weather[0].main}\r\n                    weatherDescription={data.data.weather[0].description}\r\n                    windSpeed={data.data.wind.speed}\r\n                    humidity={data.data.main.humidity}\r\n                    pressure={data.data.main.pressure}\r\n                    placeName={placeName.current}/>\r\n            </Fragment> \r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherInfo","import React, {Fragment} from 'react'\r\nimport Navbar from '../shared/Navbar'\r\nimport WeatherInfo from './WeatherInfo'\r\n\r\nconst City = () =>{\r\n    return(\r\n        <Fragment>\r\n            <Navbar />\r\n            <WeatherInfo />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default City","export default __webpack_public_path__ + \"static/media/about.29abd825.png\";","import React, {useContext} from 'react'\r\nimport aboutImg from \"../assets/images/about.png\";\r\nimport {TiWeatherPartlySunny} from 'react-icons/ti'\r\nimport {MdLocationCity} from 'react-icons/md'\r\nimport {AiFillFacebook, AiFillGithub} from 'react-icons/ai'\r\nimport {AppContext} from '../AppContext'\r\nconst About = (props) =>{\r\n    const context = useContext(AppContext)\r\n\r\n    return(\r\n        <div ref={context.aboutRef} className=\"about\"> \r\n            <img src={aboutImg} alt=\"\"/>\r\n            <div className=\"about_info_block\">\r\n                <div className=\"about_top_part\">\r\n                    <h1>About & Contacts</h1>\r\n                    <div className=\"about_item\">\r\n                        <div className=\"about_item_icon\">\r\n                            <TiWeatherPartlySunny />\r\n                        </div>\r\n                        <p>This application represents a weather search system.</p>\r\n                    </div>\r\n                    <div className=\"about_item\">\r\n                        <div className=\"about_item_icon\">\r\n                            <MdLocationCity />\r\n                        </div>\r\n                        <p>Search for weather conditions in different cities.</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"about_bottom_part\">\r\n                    <div className=\"about_email\">\r\n                        <div></div>\r\n                        <p>nik.yanovskyy@gmail.com</p>\r\n                    </div>\r\n                    <a href=\"https://habr.com/ru/company/ruvds/blog/445276/\" rel=\"noreferrer\" target=\"_blank\" className=\"about_link_btn\">\r\n                        <AiFillFacebook />\r\n                    </a>\r\n                    <a href=\"https://habr.com/ru/company/ruvds/blog/445276/\" rel=\"noreferrer\" target=\"_blank\" className=\"about_link_btn\">\r\n                        <AiFillGithub />\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import Home from './Home'\r\nimport City from './City'\r\nimport About from './About'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {AppProvider} from './AppContext'\r\n\r\nfunction App() {\r\n  return (\r\n    <AppProvider>\r\n      <div className=\"app_wrapper\">\r\n        <About/>\r\n        <BrowserRouter>\r\n          <Route exact path=\"/Weather\" render={() => <Home />}/>\r\n          <Route exact path=\"/Weather/city\" render={() => <City />}/>\r\n        </BrowserRouter>\r\n      </div>\r\n    </AppProvider>\r\n    \r\n  );\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}